# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
imports:
    - { resource: 'parameters.yaml' }
    
parameters:
    supported_locales: [es, en, eu, de]
    
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']
        arguments: ["%kernel.cache_dir%", "%upload_dir%"]
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Listener\ScriptListener:
        arguments: ["%upload_dir%"]
        tags:
            # Minimal configuration below
            - { name: doctrine.orm.entity_listener }
    Symfony\Bridge\Monolog\Logger:
        arguments: [BnvWeb]
        calls:
            - [pushProcessor, ['@App\Logger\WebUserLoggerProcessor']]
            - [pushHandler,   ['@Monolog\Handler\StreamHandler']]
            - [pushHandler,   ['@App\Logger\LoggerHandler']]
    App\Logger\LoggerHandler:
        calls:
            - [setContainer,  ["@service_container"] ]
    Monolog\Handler\StreamHandler:
        # 200 = INFO, see Monolog::Logger for the values of log levels
        arguments: ['%kernel.logs_dir%/BnvLog.log', 200]
        calls:
            - [setFormatter, ['@Monolog\Formatter\LineFormatter']]
    App\Logger\WebUserLoggerProcessor:
        calls:
            - [setContainer, ["@service_container"] ]
    Monolog\Formatter\LineFormatter:
        arguments: ["[%%datetime%%] '%%channel%%.%%level_name%%: '%%message%% '%%context%% '%%extra.user_name%% '%%extra.user_email%%\n"]
    App\Listener\LoginListener:
        arguments: ["@service_container"]
        tags:
            - { name: kernel.event_listener, event: security.interactive_login }
    App\Twig\Extension:
        tags:
            - { name: 'twig.extension' }
    App\Listener\LocaleListener:
        arguments: ['%kernel.default_locale%']
        tags:
            - { name: kernel.event_subscriber }
    App\Menu\Builder:
        #arguments: ["@knp_menu.factory", "@doctrine.orm.entity_manager", "@security.authorization_checker", "@translator.data_collector"]
        tags:
            - { name: knp_menu.menu_builder, method: mainMenu, alias: main }
    Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer:
    Doctrine\Migrations\Version\DbalMigrationFactory: ~
    App\Migrations\MigrationFactoryDecorator:
        decorates: Doctrine\Migrations\Version\DbalMigrationFactory
        arguments: ['@App\Migrations\MigrationFactoryDecorator.inner', '%upload_dir%', "@=container.hasParameter('backup_dir') ? parameter('backup_dir') : null", '@service_container']
    App\Api\DataProviders\ClientCollectionDataProvider:
        arguments:
             $collectionExtensions: !tagged api_platform.doctrine.orm.query_extension.collection
    App\Api\DataProviders\ClientItemDataProvider:
    App\Api\DataProviders\ScriptCollectionDataProvider:
        arguments:
             $collectionExtensions: !tagged api_platform.doctrine.orm.query_extension.collection
    App\Api\DataProviders\JobCollectionDataProvider:
        arguments:
             $collectionExtensions: !tagged api_platform.doctrine.orm.query_extension.collection
    App\Api\DataProviders\UserCollectionDataProvider:
        arguments:
             $collectionExtensions: !tagged api_platform.doctrine.orm.query_extension.collection
    App\Api\DataProviders\PolicyCollectionDataProvider:
        arguments:
             $collectionExtensions: !tagged api_platform.doctrine.orm.query_extension.collection
    App\Api\DataProviders\BackupLocationCollectionDataProvider:
        arguments:
             $collectionExtensions: !tagged api_platform.doctrine.orm.query_extension.collection
             
