#!/bin/bash
set -e

# Source debconf library.
. /usr/share/debconf/confmodule

if [ ! -f /etc/elkarbackup/parameters.yml ]; then
    echo "parameters.yml not found: creating it from template..."
    cp /etc/elkarbackup/parameters.yml.dist /etc/elkarbackup/parameters.yml
fi

dbhost=`sed -n 's/^[ \t]*database_host:[ \t]*\([^ #\t]*\).*/\1/p' /etc/elkarbackup/parameters.yml`
dbname=`sed -n 's/^[ \t]*database_name:[ \t]*\([^ #\t]*\).*/\1/p' /etc/elkarbackup/parameters.yml`
dbusername=`sed -n 's/^[ \t]*database_user:[ \t]*\([^ #\t]*\).*/\1/p' /etc/elkarbackup/parameters.yml`
dbuserpassword=`sed -n 's/^[ \t]*database_password:[ \t]*\([^ #\t]*\).*/\1/p' /etc/elkarbackup/parameters.yml`

if mysql -u"$dbusername" -p"$dbuserpassword" -h"$dbhost" "$dbname" </dev/null &>/dev/null
then
    echo "Using /etc/elkarbackup/parameters.yml configuration ok"
else
    db_get elkarbackup/dbhost
    dbhost="$RET"
    db_get elkarbackup/dbname
    dbname="$RET"
    db_get elkarbackup/dbusername
    dbusername="$RET"
    db_get elkarbackup/dbuserpassword
    dbuserpassword="$RET"
fi

if ! mysql -u"$dbusername" -p"$dbuserpassword" -h"$dbhost" "$dbname" </dev/null &>/dev/null
then
    db_input high elkarbackup/dbadminname     || true
    db_input high elkarbackup/dbadminpassword || true
    db_go || true
    db_get elkarbackup/dbadminname
    dbadminusername="$RET"
    db_reset elkarbackup/dbadminname
    db_get elkarbackup/dbadminpassword
    dbadminpassword="$RET"
    db_reset elkarbackup/dbadminpassword
    echo "Attempting to create DB $dbname and user $dbusername in $dbhost"
    echo 'Create database'
    echo "CREATE DATABASE IF NOT EXISTS \`$dbname\` DEFAULT CHARACTER SET utf8;" | mysql -u"$dbadminusername" -p"$dbadminpassword" -h"$dbhost"
    echo 'Create user'
    if [ "$dbhost" = localhost ]
    then
        user="'$dbusername'@localhost"
    else
        user="'$dbusername'"
    fi
    echo "GRANT ALL ON \`$dbname\`.* TO $user IDENTIFIED BY '$dbuserpassword';" | mysql -u"$dbadminusername" -p"$dbadminpassword" -h"$dbhost" || true
    echo 'Configure parameters'
    sed -i "s#database_host:.*#database_host: $dbhost#"                 /etc/elkarbackup/parameters.yml
    sed -i "s#database_name:.*#database_name: $dbname#"                 /etc/elkarbackup/parameters.yml
    sed -i "s#database_user:.*#database_user: $dbusername#"             /etc/elkarbackup/parameters.yml
    sed -i "s#database_password:.*#database_password: $dbuserpassword#" /etc/elkarbackup/parameters.yml
else
    echo DB seems to be ready
fi
echo Adding missing parameters as required
if test "x`grep warning_load_level /etc/elkarbackup/parameters.yml`" = x
then
    echo "    Add warning_load_level"
    echo                               >> /etc/elkarbackup/parameters.yml
    echo "    warning_load_level: 0.8" >> /etc/elkarbackup/parameters.yml
fi
if test "x`grep pagination_lines_per_page /etc/elkarbackup/parameters.yml`" = x
then
    echo "    Add pagination_lines_per_page"
    echo                                     >> /etc/elkarbackup/parameters.yml
    echo "    pagination_lines_per_page: 20" >> /etc/elkarbackup/parameters.yml
fi
if test "x`grep url_prefix /etc/elkarbackup/parameters.yml`" = x
then
    echo "    Add url_prefix"
    echo                                     >> /etc/elkarbackup/parameters.yml
    echo "    url_prefix:" >> /etc/elkarbackup/parameters.yml
fi
if test "x`grep disable_background /etc/elkarbackup/parameters.yml`" = x
then
    echo "    Add disable_background"
    echo                                 >> /etc/elkarbackup/parameters.yml
    echo "    disable_background: false" >> /etc/elkarbackup/parameters.yml
fi
if test "x`grep mailer_from /etc/elkarbackup/parameters.yml`" = x
then
    echo "    Add mailer_from"
    echo                    >> /etc/elkarbackup/parameters.yml
    echo "    mailer_from:" >> /etc/elkarbackup/parameters.yml
fi
if test "x`grep tahoe_active /etc/elkarbackup/parameters.yml`" = x
then
    echo "    Add tahoe_active"
    echo                    >> /etc/elkarbackup/parameters.yml
    echo "    tahoe_active: false" >> /etc/elkarbackup/parameters.yml
fi
if test "x`grep home /etc/elkarbackup/parameters.yml`" = x
then
    echo "    Add home"
    echo                    >> /etc/elkarbackup/parameters.yml
    echo "    home: /var/lib/elkarbackup" >> /etc/elkarbackup/parameters.yml
fi
if test "x`grep max_parallel_jobs /etc/elkarbackup/parameters.yml`" = x
then
    echo "    Add max_parallel_jobs"
    echo                    >> /etc/elkarbackup/parameters.yml
    echo "    max_parallel_jobs: 1" >> /etc/elkarbackup/parameters.yml
fi
if test "x`grep post_on_pre_fail /etc/elkarbackup/parameters.yml`" = x
then
    echo "    Add post_on_pre_fail"
    echo                    >> /etc/elkarbackup/parameters.yml
    echo "    post_on_pre_fail: true" >> /etc/elkarbackup/parameters.yml
fi

echo Delete cache content
rm -fR /var/cache/elkarbackup/*
echo Update DB
php /usr/share/elkarbackup/app/console doctrine:migrations:migrate --no-interaction >/dev/null || true
echo Create root user
php /usr/share/elkarbackup/app/console elkarbackup:create_admin >/dev/null || true
echo Clean cache
php /usr/share/elkarbackup/app/console cache:clear >/dev/null || true
echo Dump assests
php /usr/share/elkarbackup/app/console assetic:dump >/dev/null || true
echo Invalidate sessions
rm -rf /var/lib/elkarbackup/sessions/*

username="elkarbackup"
sed -i "s/www-data/$username/" /etc/cron.d/elkarbackup
if test x`grep ^$username\: /etc/passwd` = x
then
    adduser --system --home /var/lib/elkarbackup --shell /bin/bash --group $username
    chown -R elkarbackup.elkarbackup /var/lib/elkarbackup &>/dev/null
fi
if [ ! -f /var/lib/elkarbackup/.ssh/id_rsa ]
then
    mkdir /var/lib/elkarbackup/.ssh || true
    ssh-keygen -t rsa -N '' -C 'Automatically generated key for elkarbackup.' -f /var/lib/elkarbackup/.ssh/id_rsa
    sed -i "s#public_key:.*#public_key: /var/lib/elkarbackup/.ssh/id_rsa.pub#" /etc/elkarbackup/parameters.yml
    chown -R $username.$username /var/lib/elkarbackup
fi
# set rwx permissions for www-data and the backup user in the cache and log directories
# as described in http://symfony.com/doc/current/book/installation.html#configuration-and-setup
setfacl  -R -m u:www-data:rwx -m u:$username:rwx /var/cache/elkarbackup 2>/dev/null || ( echo "ACLs not supported. Remount with ACL and reconfigure with 'dpkg --configure --pending'" && false )
setfacl -dR -m u:www-data:rwx -m u:$username:rwx /var/cache/elkarbackup 2>/dev/null
setfacl  -R -m u:www-data:rwx -m u:$username:rwx /var/log/elkarbackup 2>/dev/null
setfacl -dR -m u:www-data:rwx -m u:$username:rwx /var/log/elkarbackup 2>/dev/null
chown -R $username.$username /var/cache/elkarbackup /var/log/elkarbackup /var/spool/elkarbackup
chown -R www-data.www-data /var/lib/elkarbackup/sessions /etc/elkarbackup/parameters.yml /var/spool/elkarbackup/uploads

uploadsdir="/var/spool/elkarbackup/uploads"
olduploadsdir=`cat /etc/elkarbackup/parameters.yml|grep upload_dir|sed 's/.*: *//'`
mkdir -p "$uploadsdir" || true
if [ ! "$olduploadsdir" == "$uploadsdir" ]; then
  mv "$olduploadsdir"/* "$uploadsdir" || true
fi
chown -R www-data.www-data "$uploadsdir"
sed -i "s#upload_dir:.*#upload_dir: $uploadsdir#" /etc/elkarbackup/parameters.yml
sed -i -e "s#elkarbackupuser#$username#g" -e "s#\s*Cmnd_Alias\s*ELKARBACKUP_SCRIPTS.*#Cmnd_Alias ELKARBACKUP_SCRIPTS=$uploadsdir/*#" /etc/sudoers.d/elkarbackup
chmod 0440 /etc/sudoers.d/elkarbackup

update-rc.d elkarbackup-tahoe-lafs defaults
service elkarbackup-tahoe-lafs start

if [ "$1" = "configure" ]; then
    CONF="elkarbackup"
    CONFSSL="elkarbackup-ssl"
    COMMON_STATE=$(dpkg-query -f '${Status}' -W 'apache2.2-common' 2>/dev/null | awk '{print $3}' || true)

    if [ -e /usr/share/apache2/apache2-maintscript-helper ]; then
        # Jessie and Trusty
        . /usr/share/apache2/apache2-maintscript-helper
        apache2_has_module rewrite || apache2_invoke enmod rewrite 2>/dev/null || exit $?
	apache2_has_module ssl ||apache2_invoke enmod ssl 2>/dev/null || exit $?
        apache2_invoke enconf $CONF 2>/dev/null || exit $?
        apache2_invoke ensite $CONF 2>/dev/null || exit $?
	apache2_invoke ensite $CONFSSL 2>/dev/null || exit $?
    elif [ "$COMMON_STATE" = "installed" ] || [ "$COMMON_STATE" = "unpacked" ] ; then
        # Ubuntu 12.04 (version module not enabled by default)
        if [ ! -f /etc/apache2/mods-enabled/version.load ]; then
          if [ -f /etc/apache2/mods-available/version.load ]; then
            a2enmod version
          fi
        fi

        if [ -d /etc/apache2/conf.d/ -a ! -L /etc/apache2/conf.d/$CONF.conf ]; then
	    # Rename old files to Apache 2.4 format
            if [ -f /etc/apache2/conf.d/$CONF ]; then
                mv /etc/apache2/conf.d/$CONF /etc/apache2/conf-available/$CONF.conf
            fi
       	    #a2enconf
            if [ ! -f /etc/apache2/conf.d/$CONF.conf ]; then
                ln -s ../conf-available/$CONF.conf /etc/apache2/conf.d/$CONF.conf
	    fi
        fi

        if [ -d /etc/apache2/sites-available/ -a ! -L /etc/apache2/sites-available/$CONF.conf ]; then
	    # Rename old files to Apache 2.4 format
            if [ -f /etc/apache2/sites-available/$CONF ]; then
                mv /etc/apache2/sites-available/$CONF /etc/apache2/sites-available/$CONF.conf
                rm /etc/apache2/sites-enabled/$CONF
            fi
            #a2ensite
	    if [ ! -f /etc/apache2/sites-enabled/$CONF.conf ]; then
                ln -s ../sites-available/$CONF.conf /etc/apache2/sites-enabled/$CONF.conf
	    fi
	    if [ ! -f /etc/apache2/sites-enabled/$CONFSSL.conf ]; then
		ln -s ../sites-available/$CONFSSL.conf /etc/apache2/sites-enabled/$CONFSSL.conf
	    fi
        fi

        a2enmod rewrite
	a2enmod ssl
    fi
fi


# reload apache
if [ -f /etc/init.d/apache2 ]
then
    invoke-rc.d apache2 reload
fi

db_stop
